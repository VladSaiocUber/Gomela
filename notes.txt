Removed constabulary/gb because would not compile
Removed golang/crypto because problem downloading the project
Removed golang/go problem with extraction the types.
Removed gobwas/ws problem while parsing the tree.


compare use of waitgroup and make chan

look for cmd uptime


5309/ 6875 executable models.

Interesting patterns found in https://github.com/perkeep/perkeep/blob/master/pkg/test/dockertest/docker.go#L114
where channels are selected to see if they return any error.


translate <-time.After translate to true branch
name of function + name of variable.


Log when chnnale not found and their position to see what is their type


test iwth bounds 0 -1 and random


check clusterinfo_GetLookupdTopics.pml

read about fuzzing


Automated Whitebox Fuzz Testing

- Improve on blackbox fusing because it uses the grammar to improve coverage -
When if(a == 10) then there is 2^32 chance that 'a' will have the value 10 - In
whitebox they execute 'symbolically' the program with an input of 0 and look for
all if cases and create constraints where they negate and solve the if
statement. In this case, this results in a constraint of a != 10 which is solved
by a = 10.
- They also several improvement to reduce the search space.

- They say that the`y report and continue when they find a divergence (the model doesnt reflect the code
precisely)
Testing

FindAll when pss > 5 and currentProcesses > 5 much slower to verify. (Should use small values?)
FindAll when pss == 5, currentProcesses == 2 and found_size == 2  quick to say there is an error.
FindAll when pss == 5, currentProcesses == 3 and found_size == 2  much slower to verify. (Should use small values?)
However when FindAll when pss == 3, currentProcesses == 2 and found_size == 1  quick to say there is no error.

The slower speed might be because we spawn different monitor for each chan size ?

---
Modelling signal.Notify as a select
---


---
worker := func() {
    defer wg.Done()
    partial := make([]float64, len(cache.Nodes))

    // Consume the next node, update centrality
    // parital to avoid unnecessary synchronizaton.
    for node := range work {
      betweennessCentrality(cache, node, partial)
    }
    partials <- partial
}

  Should I had that we dont support this ?? Yes
---
check thqt findall doesnt report an error when returning.


Read :
https://dl.acm.org/doi/abs/10.1145/1375581.1375607
https://static.usenix.org/events/osdi08/tech/full_papers/cadar/cadar.pdf

implement signals.
try all values from 0 to 3

Plan the PLAS talks
reports which values triggered the bug.




how we use previous but how we improve



Abort if defer with chan or wg



If defer in if or for etc abort and report it otherwise.
Use a stack for defer stmts.

Reqd paper at ISSTA and check the structure and evaluation.

https://github.com/vitessio/vitess/blob/master/go/vt/orchestrator/app/cli.go#L157 way too complex

Talk about Gopherlyzer paper snippet

Listening to Julius talk, could we apply Symbolic Execution to remove the overapproximation of if


not sound with goroutine leaks. because of asynchronous








for conditional parameters -
Verify program with values for mandatory parameteres
if Bug -> additional tests with conditional parameters. (0,1,3) (compute false alarms rates)






Example -> Try to use FindAll with Waitgroup (if supported)




Cool real life example : https://github.com/360EntSecGroup-Skylar/goreporter/blob/master/linters/simpler/lint/lint.go#L482




for range was translated to non=deter
( what if range over Chan spawns ? )
Added support fully for anonymous function

Found 4 bugs

Could add support for func := func() {} by attaching it to the tree

found bug where if a commpar is given as arg, it is deleted.



awsservices_Fetch376 contains 61 comm params
lint_Lint138 contains 11 params but just one that is actually used




False alarm with select : https://github.com/rancher/os/blob/master/cmd/cloudinitsave/cloudinitsave.go#L313


Done() in For : 560 Lots of them because they are called in goroutines that are spawned in Go.

Uses division for channel size throws, "[1]    58409 floating point exception"
https://github.com/dropbox/godropbox/blob/master/cinterop/buffered_work.go#L55

https://github.com/openshift/source-to-image/blob/master/pkg/util/interrupt/interrupt.go#L65 False Alarms.





BUG FOUND BY GCATCH IN GRPC

2 -> File: /Users/nicolasdilley/go/src/github.com/system-pclub/GCatch/GCatch/testdata/grpc-buggy/src/google.golang.org/grpc/internal/transport/keepalive_test.go:192
	 unsupported because uses time.NewTimer(), however when tweaked, gomela finds it too.

3 -> File: /Users/nicolasdilley/go/src/github.com/system-pclub/GCatch/GCatch/testdata/grpc-buggy/src/google.golang.org/grpc/internal/testutils/pipe_listener_test.go:53
	Found by Gomela
4 ->




// inlining channel creation
// inline high order function
// Structs flattening




 Make sure that what is reported by the tool with godel2 makes sense.

finish the script

-> godel2 benchmarks
-> Add five example

// Changing methods into functions


1. preload
2. FindAll
3. kubernetes negative counter
4. Circular for i < 3
5. x sender x receiver

3 categories for each chart (UNS, missed bugs, bug found)


Don't take into account valuation that fails (have a bug) and that contains at least one star (unknown)




3358 generated models
36 models that timeout 
66 valuation that timeout
112 not executable models.
10 projects with more than 5 comm params


https://github.com/rclone/rclone/blob/master/fs/march/march.go#L128 

real bug 

https://github.com/kubernetes/kubernetes/blob/master/test/integration/master/synthetic_master_test.go#L715 look further if real bug

Finish table
more explanation FALSE ALARMS expand

Read paper,
CLOC 


cloc is installed need to run it on 100 project and take output




Wrap up gomela (github anonmyous), the benchmark, and the csv that reports on the results of the benchmarks, results of parsing the projects. 
use sed to change nicolas dilley to anonymous.




Three possible thing, 

1. Implement the asynchronous change (Need to find commit of project annalysed)
2. Refactor tool
3. Start Thesis
4. Look at bug reported by Gomela to find false alarm rates etc.




